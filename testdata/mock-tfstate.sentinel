import "strings"
import "types"

outputs = {}

_modules = {
	"root": {
		"data": {},
		"path": [],
		"resources": {
			"null_resource": {
				"empty": {
					"null1": {
						"attr": {
							"id":       "1008964282564950311",
							"triggers": null,
						},
						"depends_on": [],
						"id":         "1008964282564950311",
						"tainted":    false,
					},
					"null2": {
						"attr": {
							"id":       "7444355725083053611",
							"triggers": null,
						},
						"depends_on": [],
						"id":         "7444355725083053611",
						"tainted":    false,
					},
					"null3": {
						"attr": {
							"id":       "1023581757134027749",
							"triggers": null,
						},
						"depends_on": [],
						"id":         "1023581757134027749",
						"tainted":    false,
					},
					"null4": {
						"attr": {
							"id":       "4373512741768283737",
							"triggers": null,
						},
						"depends_on": [],
						"id":         "4373512741768283737",
						"tainted":    false,
					},
				},
			},
		},
	},
}

module_paths = [
	[],
]

terraform_version = "1.1.6"

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources
